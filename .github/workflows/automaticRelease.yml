name: Automatically create a new release with updated tag

# only trigger on pull request closed events
on:
  pull_request:
    types: [ closed ]

jobs:
  Auto_create_new_release:
    #uncomment the line below to make this job only run if the PR has been merged (NOTE: Requires on: pull_request: [closed] )
    if: ${{ !(contains( github.event.pull_request.labels.*.name, 'no code changes')) && github.event.pull_request.merged == true }}
    runs-on: windows-latest
    env:
      FILENAME: DatabaseToolKit
      FOLDER: DatabaseBackupTool
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - uses: nuget/setup-nuget@v1.0.5

      - name: Setup nuget.config
        run: |
          nuget source Add -Name "MonSol" -Source "https://nuget.pkg.github.com/MonitoringSolutionsInc/index.json" -username "${{ secrets.ORGANIZATION_REPO_ACCESS_USERNAME }}" -password "${{ secrets.ORGANIZATION_REPO_ACCESS }}"          
          nuget setApiKey "${{ secrets.ORGANIZATION_REPO_ACCESS }}" -Source "MonSol"

      - name: Restore dependencies
        run: nuget restore ${{ env.FILENAME }}.sln

      - name: set path for needed output files
        run: |
          [string]$csprojFile = (Get-ChildItem -path ${{ github.workspace }}/${{ env.FOLDER }} -Filter *.csproj | Select-Object -First 1).fullname
          [xml]$xml = Get-Content -path $csprojFile -Raw
          $buildType = $xml.Project.PropertyGroup.Configuration.'#text' #returns debug or release
          foreach ($element in $xml.Project.PropertyGroup) {
            if ($element.Condition -match $buildType)
            {   $element.OutputPath= "bin\Release\"   } 
          } #now output is always here
          $xml.Save($csprojFile)

      - name: Build main project
        run: dotnet build ./${{ env.FOLDER }}/${{ env.FILENAME }}.csproj
      
      - name: Zip needed files
        shell: pwsh
        run: |
          $path = "${{ github.workspace }}\${{ env.FOLDER }}\bin\Release\"
          $dll = Get-ChildItem -Path .\${{ env.FOLDER }}\bin\Release\ -Include *.dll,*.exe -name -Recurse
          $dest = "$path" + "${{ env.FOLDER }}" + ".zip"
          $i = 0
          foreach ($element in $dll){
            if ($i -eq 0){
              $compress = @{
                Path = "$path$element"
                CompressionLevel = "Fastest"
                DestinationPath = "$path\${{ env.FOLDER }}.zip"
              }
              Compress-Archive @compress  
              $i = 1  
            } else {
              echo "Path: $path$element"
              echo "Dest: $path${{ env.FOLDER }}.zip"
              Compress-Archive -Path "$path$element" -Update -DestinationPath "$dest"
            }
          }

      - uses: oprypin/find-latest-tag@v1
        id: latestVersion
        with:
          repository: ${{ github.repository }}
          releases-only: true
          token: ${{ secrets.GITHUB_TOKEN}}

      - name: Fix Latest Version by remove preceding v (if present) and set env variable
        run: |
          $version = "${{ steps.latestVersion.outputs.tag }}"
          if ($version -match 'v'){
            $output = $version.substring(1)
          } else {
            $output = $version
          }
          echo "bashVersion=$output" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo $output

      - name: update version - patch
        if: ${{ !(contains( github.event.pull_request.labels.*.name, 'minor update') || contains( github.event.pull_request.labels.*.name, 'major update')) }}
        shell: pwsh
        run: |
          [version]$version = '${{ env.bashVersion }}'
          echo $version
          [version]$NewVersion = [version]::new( $Version.Major, $Version.Minor, ($Version.Build + 1) )
          [string]$vstring = $NewVersion
          echo "newVersion=$vstring" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "new version: $vstring"

      - name: update version - minor
        if: ${{ contains( github.event.pull_request.labels.*.name, 'minor update') }}
        shell: pwsh
        run: |
          [version]$version = '${{ env.bashVersion }}'
          echo $version
          [version]$NewVersion = [version]::new( $Version.Major, ($Version.Minor + 1), 0 )
          [string]$vstring = $NewVersion
          echo "newVersion=$vstring" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "new version: $vstring"

      - name: update version - major
        if: ${{ contains( github.event.pull_request.labels.*.name, 'major update') }}
        shell: pwsh
        run: |
          [version]$version = '${{ env.bashVersion }}'
          echo $version
          [version]$NewVersion = [version]::new( ($Version.Major + 1), 0, 0 )
          [string]$vstring = $NewVersion
          echo "newVersion=$vstring" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "new version: $vstring"

      - name: Create new release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.newVersion }}
          release_name: Database Backup and Restore Tool
          body: |
            ### This release was created automatically though GitHub Actions.
            Please see README for documentation
            download and extract the zip to get started
            OR check out the link below for the MonSol Digital Toolbox and download it with that app
            https://github.com/MonitoringSolutionsInc/MonSol-Digital-Toolbox/releases/latest 
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ github.workspace }}\${{ env.FOLDER }}\bin\Release\${{ env.Folder }}.zip
          asset_name: ${{ env.Folder }}.zip
          asset_content_type: application/zip


  PR_close_no_merge:
    # this job will only run if the PR has been closed without being merged
    if: github.event.pull_request.merged == false
    runs-on: windows-latest
    steps:
    - run: |
        echo PR #${{ github.event.number }} has been closed without being merged
        
  PR_closed_or_merged_NO_PACKAGE_UPDATE:
    if: ${{ contains( github.event.pull_request.labels.*.name, 'no code changes') }}  
    runs-on: windows-latest
    steps:
    - run: echo "Hello, if you are seeing this text that means the automatic version incremenet did not take place because of the labels attached to this pull request. Namely no code changes"
